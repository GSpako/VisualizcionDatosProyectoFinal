import os
import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
import altair as alt
from folium.features import GeoJsonTooltip
from folium.plugins import MeasureControl, Fullscreen
from streamlit_folium import st_folium

# Debe ser el primer comando de Streamlit
st.set_page_config(page_title="Indicadores VIH - Unidad 5", layout="wide")

# Para regenerar .shx si falta
os.environ["SHAPE_RESTORE_SHX"] = "YES"

def parse_val(x):
    if pd.isna(x): return None
    s = str(x).strip().lower()
    mul = {"k":1e3, "m":1e6, "b":1e9}
    return float(s[:-1]) * mul[s[-1]] if s and s[-1] in mul else float(s)

@st.cache_data
def cargar_csv(path):
    df = pd.read_csv(path)
    for col in df.columns[1:]:
        df[col] = df[col].apply(parse_val)
    df.set_index("country", inplace=True)
    return df

@st.cache_data
def cargar_shp(path="ne_110m_admin_0_countries.shp"):
    g = gpd.read_file(path)
    return g.rename(columns={"ADMIN":"country","CONTINENT":"continent"})[["country","continent","geometry"]]

# Carga de datos
df_deaths = cargar_csv("annual_hiv_deaths_number_all_ages.csv")
df_new    = cargar_csv("newly_hiv_infected_number_all_ages.csv")
df_plwh   = cargar_csv("people_living_with_hiv_number_all_ages.csv")
gdf       = cargar_shp()

indicadores = {
    "Muertes por VIH": df_deaths,
    "Nuevas infecciones VIH": df_new,
    "Personas viviendo con VIH": df_plwh
}

a√±os = sorted(int(y) for y in df_deaths.columns)
min_a√±o, max_a√±o = a√±os[0], a√±os[-1]

# -- Funciones de gr√°fico --

def metricas_globales(df):
    s = df.sum(axis=0).fillna(0)
    mxy, mny = int(s.idxmax()), int(s.idxmin())
    ly = max_a√±o
    c1, c2, c3 = st.columns(3)
    c1.metric("A√±o con m√°s valor", mxy, f"{int(s[str(mxy)]):,}")
    c2.metric("A√±o con menos valor", mny, f"{int(s[str(mny)]):,}")
    c3.metric(f"Valor en {ly}", f"{int(s[str(ly)]):,}")
    st.markdown("---")

def plot_tendencia(df, key):
    st.subheader("Tendencia Global")
    col1, col2 = st.columns([1, 4], gap="small")
    with col1:
        t = st.radio("", ["L√≠nea", "√Årea"], key=key + "_tp", horizontal=True)
    with col2:
        r = st.slider("", min_a√±o, max_a√±o, (min_a√±o, max_a√±o), key=key + "_rng")
    serie = df.sum(axis=0).loc[str(r[0]):str(r[1])].astype(int)
    dfp = pd.DataFrame({"A√±o": serie.index.astype(int), "Valor": serie.values})
    chart = alt.Chart(dfp).mark_line() if t=="L√≠nea" else alt.Chart(dfp).mark_area(opacity=0.3)
    chart = chart.encode(x="A√±o:O", y="Valor:Q").properties(width=700, height=350).configure_view(strokeOpacity=0)
    st.altair_chart(chart, use_container_width=True)

def plot_top(df, key):
    st.subheader("Top N Pa√≠ses")
    col1, col2 = st.columns(2, gap="small")
    with col1:
        y = st.slider("", min_a√±o, max_a√±o, min_a√±o, key=key + "_yr")
    with col2:
        n = st.number_input("", 5, 20, 10, key=key + "_n")
    topn = df[str(y)].fillna(0).sort_values(ascending=False).head(n).astype(int)
    dfp = topn.reset_index().rename(columns={str(y): "Valor", "country": "Pa√≠s"})
    chart = alt.Chart(dfp).mark_bar(cornerRadiusTopLeft=5, cornerRadiusTopRight=5) \
        .encode(x=alt.X("Pa√≠s:N", sort="-y"), y="Valor:Q") \
        .properties(width=700, height=350).configure_axis(labelAngle=-45)
    st.altair_chart(chart, use_container_width=True)

def plot_evolucion(df, key):
    st.subheader("Evoluci√≥n por Pa√≠s")
    col1, col2 = st.columns([1, 4], gap="small")
    with col1:
        t = st.radio("", ["L√≠nea", "√Årea"], key=key + "_t2", horizontal=True)
    with col2:
        ps = st.multiselect("", df.index, df.index[:3], key=key + "_ps")
    if not ps:
        st.info("Selecciona al menos un pa√≠s.")
        return
    evo = df.loc[ps].T.fillna(0).astype(int)
    dfm = evo.reset_index().melt(id_vars="index", var_name="Pa√≠s", value_name="Valor").rename(columns={"index":"A√±o"})
    mark = "line" if t=="L√≠nea" else "area"
    opacity = 1 if t=="L√≠nea" else 0.3
    chart = alt.Chart(dfm).mark_line(opacity=opacity) if mark=="line" else alt.Chart(dfm).mark_area(opacity=opacity)
    chart = chart.encode(x="A√±o:O", y="Valor:Q", color="Pa√≠s:N").properties(width=700, height=350)
    st.altair_chart(chart, use_container_width=True)

def plot_comp_ind(_df, key):
    st.subheader("Comparaci√≥n Indicadores (1990‚Äì2011)")
    sis = st.multiselect("", list(indicadores), list(indicadores), key=key+"_inds")
    comp = pd.DataFrame({i: indicadores[i].sum(axis=0).astype(int) for i in sis}).loc["1990":"2011"]
    dfm = comp.reset_index().melt(id_vars="index", var_name="Indicador", value_name="Valor").rename(columns={"index":"A√±o"})
    chart = alt.Chart(dfm).mark_line(point=True).encode(x="A√±o:O", y="Valor:Q", color="Indicador:N") \
                        .properties(width=700, height=350)
    st.altair_chart(chart, use_container_width=True)

def plot_tasa(df, key):
    st.subheader("Tasas de Variaci√≥n Anual")
    ps = st.multiselect("Pa√≠ses", df.index, df.index[:3], key=key+"_ps")
    r = st.slider("", min_a√±o, max_a√±o, (min_a√±o, max_a√±o), key=key + "_rng")
    sub = df.loc[ps, [str(y) for y in range(r[0], r[1]+1)]].T
    pct = (sub.pct_change().dropna() * 100).astype(float).reset_index().melt(id_vars="index", var_name="Pa√≠s", value_name="% Cambio").rename(columns={"index":"A√±o"})
    chart = alt.Chart(pct).mark_bar().encode(x="A√±o:O", y="% Cambio:Q", color="Pa√≠s:N") \
                         .properties(width=700, height=350)
    st.altair_chart(chart, use_container_width=True)

def render_comparacion():
    vistas = [
        ("Tendencia", plot_tendencia),
        ("Top N Pa√≠ses", plot_top),
        ("Evoluci√≥n", plot_evolucion),
        ("Comparaci√≥n Ind.", plot_comp_ind),
        ("Tasas Anual", plot_tasa)
    ]
    c1, c2 = st.columns(2)
    for col, prefix in zip([c1, c2], ["A", "B"]):
        with col:
            st.markdown(f"### Gr√°fica {prefix}")
            indi = st.selectbox("Indicador", list(indicadores), key=f"cmp_ind_{prefix}")
            df_orig = indicadores[indi].copy(); df_orig.name = indi
            title, fn = st.selectbox("Vista", vistas, format_func=lambda x: x[0], key=f"cmp_v_{prefix}")
            fn(df_orig, f"cmp_{prefix}")

# -- Sidebar y navegaci√≥n --

st.sidebar.title("üîç Navegaci√≥n")
page = st.sidebar.radio("", ["Gr√°ficas", "Mapa", "Comparaci√≥n Gr√°ficas"])

if page in ["Gr√°ficas", "Mapa"]:
    sel = st.sidebar.selectbox("Indicador", list(indicadores))
    df_sel = indicadores[sel]; df_sel.name = sel

if page == "Gr√°ficas":
    st.header(f"üìà Indicador: {sel}")
    metricas_globales(df_sel)
    tabs = st.tabs(["Tendencia","Top N","Evoluci√≥n","Comparaci√≥n","Tasas"])
    funcs = [plot_tendencia, plot_top, plot_evolucion, plot_comp_ind, plot_tasa]
    keys  = ["tg","tn","ep","ci","tv"]
    for tab, fn, key in zip(tabs, funcs, keys):
        with tab:
            fn(df_sel, key)

elif page == "Mapa":
    st.sidebar.markdown("### Configuraci√≥n de Mapa")
    mcol1, mcol2 = st.sidebar.columns(2, gap="small")
    with mcol1:
        map_type = st.radio("", ["Anual", "Incremento"], index=0)
    with mcol2:
        palette = st.selectbox("", ["YlOrRd","Blues","PuRd","Greens"], index=0)

    if map_type == "Anual":
        year    = st.sidebar.slider("A√±o", min_a√±o, max_a√±o, min_a√±o)
        gdf_map = gdf.merge(df_sel[[str(year)]].reset_index(), on="country", how="left")
        legend, data_col = f"{sel} ({year})", str(year)
    else:
        start, end = st.sidebar.slider("Rango a√±os", min_value=min_a√±o, max_value=max_a√±o, value=(min_a√±o, min_a√±o+1))
        diff       = df_sel[str(end)] - df_sel[str(start)]
        diff.name  = f"Œî {start}‚Üí{end}"
        gdf_map    = gdf.merge(diff.reset_index().rename(columns={diff.name:str(diff.name)}), on="country", how="left")
        legend, data_col = diff.name, str(diff.name)

    m = folium.Map(location=[0,0], zoom_start=2, tiles=None, control_scale=True)
    folium.Choropleth(geo_data=gdf_map.__geo_interface__, data=gdf_map,
                      columns=["country", data_col], key_on="feature.properties.country",
                      fill_color=palette, fill_opacity=0.9, line_opacity=0.3,
                      nan_fill_color="lightgray", legend_name=legend).add_to(m)
    folium.GeoJson(gdf_map.__geo_interface__,
                   style_function=lambda f: {"fillOpacity": 0, "weight": 0},
                   tooltip=GeoJsonTooltip(fields=["country", data_col], aliases=["Pa√≠s", legend], localize=True)
    ).add_to(m)
    MeasureControl(position="bottomleft", primary_length_unit="kil√≥metros").add_to(m)
    Fullscreen(position="topright").add_to(m)
    st_folium(m, width=1080, height=800, key=f"map_{map_type}_{palette}")

else:
    st.header("üîÄ Comparaci√≥n de Gr√°ficas")
    render_comparacion()
